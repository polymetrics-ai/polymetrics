---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":[{"type":"text","text":"You
        are an ETL Assistant that helps users plan and create data pipelines based
        on their requirements.\n\nFollow these steps when helping users:\n1. Use the
        connector_selection_tool to find appropriate source and destination connectors\n2.
        If the connector_selection_tool returns a message, pass it to the user else
        use the connection_creation_tool to create the pipeline\n3. If connection_creation_tool
        creates a new connection, use the sync_initiator_tool to create the syncs\n4.
        If the user query includes specific data requirements or analysis needs, use
        the query_generation_tool to create appropriate SQL queries\n5. Always format
        your responses according to the provided JSON schema\n6. For successful operations:\n  \"success\":
        true,\n  \"message\": \"Clear description of what was accomplished\"\n6. For
        operations needing clarification or with errors:\n   \"success\": false,\n   \"message\":
        \"Clear explanation of what information is needed or what went wrong\"\n\nRemember:\n-
        Always select the connectors first before creating the connection\n- If the
        user asks for specific data analysis or filtering, use the query_generation_tool\n-
        Always provide clear, actionable messages\n- For errors, explain what information
        is missing\n- For success, summarize what was configured\n- Always pass the
        query as it is into the tools without any modifications\n\nYou must format
        your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON
        Schema\" is a declarative language that allows you to annotate and validate
        JSON documents.\n\nFor example, the example \"JSON Schema\" instance {\"properties\":
        {\"foo\": {\"description\": \"a list of test words\", \"type\": \"array\",
        \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}}\nwould match
        an object with one required property, \"foo\". The \"type\" property specifies
        \"foo\" must be an \"array\", and the \"description\" property semantically
        describes it as \"a list of test words\". The items within \"foo\" must be
        strings.\nThus, the object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted
        instance of this example \"JSON Schema\". The object {\"properties\": {\"foo\":
        [\"bar\", \"baz\"]}}} is not well-formatted.\n\nYour output will be parsed
        and type-checked according to the provided schema instance, so make sure all
        fields in your output match the schema exactly and there are no trailing commas!\n\nHere
        is the JSON Schema instance your output must adhere to. Include the enclosing
        markdown codeblock:\n```json\n{\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"description\":\"Whether
        the operation was successful\"},\"message\":{\"type\":\"string\",\"description\":\"Success
        or error message to display to the user\"},\"title\":{\"type\":\"string\",\"description\":\"Title
        for the chat session\"},\"description\":{\"type\":\"string\",\"description\":\"Detailed
        description of the operation\"}},\"required\":[\"success\",\"message\"],\"additionalProperties\":false}\n```\n\n"}]},{"role":"user","content":[{"type":"text","text":"Create
        a connection between source A and destination B"}]}],"tools":[{"type":"function","function":{"name":"ai_tools_connector_connector_selection_tool__find_connectors","description":"Find
        appropriate connectors based on user query and requirements","parameters":{"type":"object","properties":{"query":{"type":"string","description":"User
        query and requirements"}},"required":["query"]}}},{"type":"function","function":{"name":"ai_tools_connection_connection_creation_tool__create_connection","description":"Creates
        a new connection for query based on the selected connector and streams","parameters":{"type":"object","properties":{"query":{"type":"string","description":"User
        query and requirements"}},"required":["query"]}}},{"type":"function","function":{"name":"ai_tools_sync_sync_initiator_tool__initiate_sync","description":"Initiates
        data synchronization for a connection","parameters":{"type":"object","properties":{"connection_id":{"type":"string","description":"ID
        of the connection to sync"}},"required":["connection_id"]}}},{"type":"function","function":{"name":"ai_tools_query_query_generation_tool__generate_query","description":"Generates
        SQL query based on destination schema and stream schema","parameters":{"type":"object","properties":{"query_requirements":{"type":"string","description":"Natural
        language description of query requirements"}},"required":["query_requirements"]}}}],"tool_choice":"auto","parallel_tool_calls":true,"model":"gpt-4o","temperature":0.7,"n":1}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <AUTH_TOKEN>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 07 Feb 2025 17:38:35 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-w9alqgscxndsn8ysy5tgcdlx
      Openai-Processing-Ms:
      - '1209'
      Openai-Version:
      - '2020-10-01'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '2000000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '1999256'
      X-Ratelimit-Reset-Requests:
      - 6ms
      X-Ratelimit-Reset-Tokens:
      - 22ms
      X-Request-Id:
      - req_77c9f69345d2037c2656a11947444de5
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=vC5jNR8_qnkcPFZmvs3dnLem_R4373FxXM_YEVx61dk-1738949915-1.0.1.1-f.QWtoNlhoi8VexnCqx55Ll_emYIzOr_QST2dA7iH0jml3WfhhtnN6eNJAiCHkm4gITU2NBAalGKSZOb5z8vDw;
        path=/; expires=Fri, 07-Feb-25 18:08:35 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=zQf8xGhxbsiVz8ou7Gt9g6MMoALK_xgJPonZC1zFg7w-1738949915727-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 90e5277d3bd51790-MAA
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-AyMbCQotSQ8TzCyzvIWDWOJnGI3Us",
          "object": "chat.completion",
          "created": 1738949914,
          "model": "gpt-4o-2024-08-06",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": null,
                "tool_calls": [
                  {
                    "id": "call_KMBnMpCjZQ3iJw8Qyz2Qsr0T",
                    "type": "function",
                    "function": {
                      "name": "ai_tools_connector_connector_selection_tool__find_connectors",
                      "arguments": "{\"query\":\"Create a connection between source A and destination B\"}"
                    }
                  }
                ],
                "refusal": null
              },
              "logprobs": null,
              "finish_reason": "tool_calls"
            }
          ],
          "usage": {
            "prompt_tokens": 789,
            "completion_tokens": 31,
            "total_tokens": 820,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_50cad350e4"
        }
  recorded_at: Fri, 07 Feb 2025 17:38:35 GMT
- request:
    method: post
    uri: https://openrouter.ai/api/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"user","content":"You are a Data Integration Assistant
        specialized in creating data pipelines. Your role is to help users set up
        source-to-destination data connections based on their requirements.\n\nAvailable
        connectors in the workspace:\nAPI Connectors:\n\n\nDatabase Connectors:\nConnector
        Name: Default DuckDB\nConnector ID: 1043\nIntegration Type: database\nConnector
        Language: ruby\nDefault Analytics DB: Yes\nConnector Configuration: ---\ndatabase:
        analytics_fc9e91cc.duckdb\ncredentials:\n  path: analytics_fc9e91cc.duckdb\n\n\n\nInstructions:\n1.
        Analyze the user''s query to understand their data integration needs\n2. Identify
        appropriate source which will be an API connector based on the query and destination
        which will be a database connector\n3. For source connectors:\n   - Match
        requirements with available API connectors and their streams\n   - Consider
        data structure, required fields, and primary keys\n4. For destination:\n   -
        Use the default analytics database (marked as default_analytics_db: true)\n5.
        If the query is ambiguous or needs clarification, ask appropriate questions\n\nYou
        must format your output as a JSON value that adheres to a given \"JSON Schema\"
        instance.\n\n\"JSON Schema\" is a declarative language that allows you to
        annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\"
        instance {\"properties\": {\"foo\": {\"description\": \"a list of test words\",
        \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}}\nwould
        match an object with one required property, \"foo\". The \"type\" property
        specifies \"foo\" must be an \"array\", and the \"description\" property semantically
        describes it as \"a list of test words\". The items within \"foo\" must be
        strings.\nThus, the object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted
        instance of this example \"JSON Schema\". The object {\"properties\": {\"foo\":
        [\"bar\", \"baz\"]}}} is not well-formatted.\n\nYour output will be parsed
        and type-checked according to the provided schema instance, so make sure all
        fields in your output match the schema exactly and there are no trailing commas!\n\nHere
        is the JSON Schema instance your output must adhere to. Include the enclosing
        markdown codeblock:\n```json\n{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"message\",\"pipeline_action\"],\"description\":\"Type
        of response - either a message asking for clarification or pipeline action
        configuration\"},\"content\":{\"type\":\"array\",\"items\":{\"oneOf\":[{\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\",\"description\":\"Clarification
        message to ask the user\"}},\"required\":[\"message\"],\"additionalProperties\":false},{\"type\":\"object\",\"properties\":{\"action_type\":{\"type\":\"string\",\"enum\":[\"connector_selection\"],\"description\":\"Type
        of pipeline action\"},\"action_data\":{\"type\":\"object\",\"properties\":{\"source\":{\"type\":\"object\",\"properties\":{\"connector_name\":{\"type\":\"string\",\"description\":\"Name
        of the source connector\"},\"connector_id\":{\"type\":\"string\",\"description\":\"ID
        of the source connector\"},\"streams\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Name
        of the stream\"},\"fields\":{\"type\":\"object\",\"properties\":{\"required\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"optional\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"primary_key\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"required\",\"optional\",\"primary_key\"]}},\"required\":[\"name\",\"fields\"]}}},\"required\":[\"connector_name\",\"connector_id\",\"streams\"]},\"destination\":{\"type\":\"object\",\"properties\":{\"connector_name\":{\"type\":\"string\",\"description\":\"Name
        of the destination database connector\"},\"connector_id\":{\"type\":\"string\",\"description\":\"ID
        of the destination database connector\"},\"is_default_analytics_db\":{\"type\":\"boolean\",\"description\":\"Whether
        to use default analytics database\"}},\"required\":[\"connector_name\",\"connector_id\"]}},\"required\":[\"source\",\"destination\"]}},\"required\":[\"action_type\",\"action_data\"],\"additionalProperties\":false}]},\"minItems\":1,\"description\":\"Array
        of either messages or pipeline action configurations\"}},\"required\":[\"type\",\"content\"],\"additionalProperties\":false}\n```\n\n\nUser
        Query: Create a connection between source A and destination B\n\nRemember:\n-
        Source must be an API connector\n- Always use the exact stream names given
        in the connector stream descriptions\n- Destination must be a database connector\n-
        Validate stream compatibility and field mappings\n- If multiple options exist,
        include all only one api source for one connection creation\n- If clarification
        needed, ask specific questions\n- Consider data types and structure compatibility\n-
        Only return the JSON response\n"}],"model":"deepseek/deepseek-chat","temperature":0.7,"n":1}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <AUTH_TOKEN>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 07 Feb 2025 17:38:36 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      X-Clerk-Auth-Message:
      - Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid,
        token-carrier=header)
      X-Clerk-Auth-Reason:
      - token-invalid
      X-Clerk-Auth-Status:
      - signed-out
      Vary:
      - Accept-Encoding
      Server:
      - cloudflare
      Cf-Ray:
      - 90e5278dff2c17ab-MAA
    body:
      encoding: ASCII-8BIT
      string: "\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n{\"id\":\"gen-1738949917-qOzfKO8U0U05sCrAxBDW\",\"provider\":\"Novita\",\"model\":\"deepseek/deepseek-chat\",\"object\":\"chat.completion\",\"created\":1738949917,\"choices\":[{\"logprobs\":null,\"finish_reason\":\"stop\",\"native_finish_reason\":\"stop\",\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\"```json\\n{\\\"type\\\":\\\"message\\\",\\\"content\\\":[{\\\"message\\\":\\\"Could
        you please provide more details about the API connector and the specific streams
        you want to use from Source A? Also, are there any particular fields or data
        structures you need to map to Destination B?\\\"}]}\\n```\",\"refusal\":null}}],\"system_fingerprint\":\"\",\"usage\":{\"prompt_tokens\":999,\"completion_tokens\":57,\"total_tokens\":1056}}"
  recorded_at: Fri, 07 Feb 2025 17:38:40 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":[{"type":"text","text":"You
        are an ETL Assistant that helps users plan and create data pipelines based
        on their requirements.\n\nFollow these steps when helping users:\n1. Use the
        connector_selection_tool to find appropriate source and destination connectors\n2.
        If the connector_selection_tool returns a message, pass it to the user else
        use the connection_creation_tool to create the pipeline\n3. If connection_creation_tool
        creates a new connection, use the sync_initiator_tool to create the syncs\n4.
        If the user query includes specific data requirements or analysis needs, use
        the query_generation_tool to create appropriate SQL queries\n5. Always format
        your responses according to the provided JSON schema\n6. For successful operations:\n  \"success\":
        true,\n  \"message\": \"Clear description of what was accomplished\"\n6. For
        operations needing clarification or with errors:\n   \"success\": false,\n   \"message\":
        \"Clear explanation of what information is needed or what went wrong\"\n\nRemember:\n-
        Always select the connectors first before creating the connection\n- If the
        user asks for specific data analysis or filtering, use the query_generation_tool\n-
        Always provide clear, actionable messages\n- For errors, explain what information
        is missing\n- For success, summarize what was configured\n- Always pass the
        query as it is into the tools without any modifications\n\nYou must format
        your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON
        Schema\" is a declarative language that allows you to annotate and validate
        JSON documents.\n\nFor example, the example \"JSON Schema\" instance {\"properties\":
        {\"foo\": {\"description\": \"a list of test words\", \"type\": \"array\",
        \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}}\nwould match
        an object with one required property, \"foo\". The \"type\" property specifies
        \"foo\" must be an \"array\", and the \"description\" property semantically
        describes it as \"a list of test words\". The items within \"foo\" must be
        strings.\nThus, the object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted
        instance of this example \"JSON Schema\". The object {\"properties\": {\"foo\":
        [\"bar\", \"baz\"]}}} is not well-formatted.\n\nYour output will be parsed
        and type-checked according to the provided schema instance, so make sure all
        fields in your output match the schema exactly and there are no trailing commas!\n\nHere
        is the JSON Schema instance your output must adhere to. Include the enclosing
        markdown codeblock:\n```json\n{\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"description\":\"Whether
        the operation was successful\"},\"message\":{\"type\":\"string\",\"description\":\"Success
        or error message to display to the user\"},\"title\":{\"type\":\"string\",\"description\":\"Title
        for the chat session\"},\"description\":{\"type\":\"string\",\"description\":\"Detailed
        description of the operation\"}},\"required\":[\"success\",\"message\"],\"additionalProperties\":false}\n```\n\n"}]},{"role":"user","content":[{"type":"text","text":"Create
        a connection between source A and destination B"}]},{"role":"assistant","tool_calls":[{"id":"call_KMBnMpCjZQ3iJw8Qyz2Qsr0T","type":"function","function":{"name":"ai_tools_connector_connector_selection_tool__find_connectors","arguments":"{\"query\":\"Create
        a connection between source A and destination B\"}"}}]},{"role":"tool","tool_call_id":"call_KMBnMpCjZQ3iJw8Qyz2Qsr0T","content":[{"type":"text","text":"{:status=\u003e:success,
        :data=\u003e{\"type\"=\u003e\"message\", \"content\"=\u003e[{\"message\"=\u003e\"Could
        you please provide more details about the API connector and the specific streams
        you want to use from Source A? Also, are there any particular fields or data
        structures you need to map to Destination B?\"}]}}"}]}],"tools":[{"type":"function","function":{"name":"ai_tools_connector_connector_selection_tool__find_connectors","description":"Find
        appropriate connectors based on user query and requirements","parameters":{"type":"object","properties":{"query":{"type":"string","description":"User
        query and requirements"}},"required":["query"]}}},{"type":"function","function":{"name":"ai_tools_connection_connection_creation_tool__create_connection","description":"Creates
        a new connection for query based on the selected connector and streams","parameters":{"type":"object","properties":{"query":{"type":"string","description":"User
        query and requirements"}},"required":["query"]}}},{"type":"function","function":{"name":"ai_tools_sync_sync_initiator_tool__initiate_sync","description":"Initiates
        data synchronization for a connection","parameters":{"type":"object","properties":{"connection_id":{"type":"string","description":"ID
        of the connection to sync"}},"required":["connection_id"]}}},{"type":"function","function":{"name":"ai_tools_query_query_generation_tool__generate_query","description":"Generates
        SQL query based on destination schema and stream schema","parameters":{"type":"object","properties":{"query_requirements":{"type":"string","description":"Natural
        language description of query requirements"}},"required":["query_requirements"]}}}],"tool_choice":"auto","parallel_tool_calls":true,"model":"gpt-4o","temperature":0.7,"n":1}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <AUTH_TOKEN>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 07 Feb 2025 17:38:43 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-w9alqgscxndsn8ysy5tgcdlx
      Openai-Processing-Ms:
      - '2391'
      Openai-Version:
      - '2020-10-01'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '2000000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '1999184'
      X-Ratelimit-Reset-Requests:
      - 6ms
      X-Ratelimit-Reset-Tokens:
      - 24ms
      X-Request-Id:
      - req_01370410cdf4f27758a2f14c8918f46b
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=rCX56qAY2CScilYsWd_cClr_ByCnSCjPTzanDk8.98g-1738949923-1.0.1.1-GRFXRUUL.u_2aSBnOC5rw99yI_8DJnylhRzQAHcYHIqFHAof0RlcMuBX_D.5m3GVbXX.vvbK9a6qE.NIiemxKg;
        path=/; expires=Fri, 07-Feb-25 18:08:43 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=Vqu8GGaIvHzJM2TqmsFpNVmzHgqyMmYRIU8xwx6.Yfw-1738949923574-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 90e527ace8fd7ea4-MAA
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-AyMbJaumwN9dNXA0jwosiSYMrsq7p",
          "object": "chat.completion",
          "created": 1738949921,
          "model": "gpt-4o-2024-08-06",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "```json\n{\n  \"success\": false,\n  \"message\": \"Could you please provide more details about the API connector and the specific streams you want to use from Source A? Also, are there any particular fields or data structures you need to map to Destination B?\",\n  \"title\": \"Connection Setup Clarification Needed\",\n  \"description\": \"In order to create a connection between source A and destination B, additional details are needed regarding the API connector, specific streams, and any specific fields or data structures to be mapped.\"\n}\n```",
                "refusal": null
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 898,
            "completion_tokens": 111,
            "total_tokens": 1009,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_50cad350e4"
        }
  recorded_at: Fri, 07 Feb 2025 17:38:43 GMT
recorded_with: VCR 6.3.1
