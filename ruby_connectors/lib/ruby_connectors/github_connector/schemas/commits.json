{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Commit",
  "description": "Detailed information about a GitHub commit including metadata, author information, and file changes",
  "x-stream_name": "commits",
  "x-source_defined_primary_key": ["sha"],
  "x-supported_sync_modes": ["incremental_dedup"],
  "x-default_sync_mode": "incremental_dedup",
  "properties": {
    "url": {
      "description": "API URL to fetch the commit details",
      "x-sql-example": "SELECT url FROM sample_schema.sample_table",
      "type": "string",
      "format": "uri"
    },
    "sha": {
      "description": "The 40-character SHA-1 hash uniquely identifying the commit",
      "x-sql-example": "SELECT sha FROM sample_schema.sample_table",
      "type": "string"
    },
    "node_id": {
      "description": "Globally unique identifier for the commit in GitHub's GraphQL API",
      "x-sql-example": "SELECT node_id FROM sample_schema.sample_table",
      "type": "string"
    },
    "html_url": {
      "description": "Browser-viewable URL of the commit in GitHub's web interface",
      "x-sql-example": "SELECT html_url FROM sample_schema.sample_table",
      "type": "string",
      "format": "uri"
    },
    "comments_url": {
      "description": "API endpoint URL for accessing commit comments",
      "x-sql-example": "SELECT comments_url FROM sample_schema.sample_table",
      "type": "string",
      "format": "uri"
    },
    "commit": {
      "description": "Core commit metadata including message, author, and verification status",
      "x-sql-example": "SELECT commit FROM sample_schema.sample_table",
      "type": "object",
      "properties": {
        "url": {
          "description": "API URL for the commit object",
          "type": "string",
          "format": "uri"
        },
        "author": {
          "description": "Original author of the commit content",
          "anyOf": [
            {"type": "null"},
            {
              "type": "object",
              "properties": {
                "name": {"type": "string", "description": "Author's name as configured in Git"},
                "email": {"type": "string", "description": "Author's email as configured in Git"},
                "date": {"type": "string", "format": "date-time", "description": "Timestamp of authorship"}
              }
            }
          ]
        },
        "committer": {
          "description": "User who committed the changes to the repository",
          "anyOf": [
            {"type": "null"},
            {
              "type": "object",
              "properties": {
                "name": {"type": "string", "description": "Committer's name", "x-sql-example": "SELECT commit.committer.name FROM sample_schema.sample_table"},
                "email": {"type": "string", "description": "Committer's email", "x-sql-example": "SELECT commit.committer.email FROM sample_schema.sample_table"},
                "date": {"type": "string", "format": "date-time", "description": "Timestamp of commit", "x-sql-example": "SELECT commit.committer.date FROM sample_schema.sample_table"}
              }
            }
          ]
        },
        "message": {
          "description": "Full commit message including subject and body",
          "type": "string"
        },
        "comment_count": {
          "description": "Number of comments attached to the commit",
          "type": "integer"
        },
        "tree": {
          "description": "Reference to the Git tree object representing the repository state",
          "type": "object",
          "properties": {
            "sha": {"type": "string", "description": "SHA-1 hash of the tree object"},
            "url": {"type": "string", "format": "uri", "description": "API URL for the tree object"}
          },
          "required": ["sha", "url"]
        },
        "verification": {
          "description": "Cryptographic verification status of the commit signature",
          "type": "object",
          "properties": {
            "verified": {"type": "boolean", "description": "Whether the signature was successfully verified"},
            "reason": {"type": "string", "description": "Verification status explanation"},
            "payload": {"type": ["string", "null"], "description": "Signed payload content"},
            "signature": {"type": ["string", "null"], "description": "Cryptographic signature string"},
            "verified_at": {"type": ["string", "null"], "description": "Timestamp of verification"}
          },
          "required": ["verified", "reason", "payload", "signature", "verified_at"]
        }
      },
      "required": ["author", "committer", "comment_count", "message", "tree", "url"]
    },
    "author": {
      "description": "GitHub user account of the commit author",
      "x-sql-example": "SELECT author FROM sample_schema.sample_table",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "login": {"type": "string", "description": "GitHub username"},
            "id": {"type": "integer", "format": "int64", "description": "GitHub user ID"},
            "avatar_url": {"type": "string", "format": "uri", "description": "URL of user's avatar image"},
            "html_url": {"type": "string", "format": "uri", "description": "GitHub profile URL"},
            "type": {"type": "string", "description": "Type of user account (User/Organization)"},
            "site_admin": {"type": "boolean", "description": "Administrator status in GitHub"}
          },
          "required": ["login", "id", "avatar_url", "html_url", "type", "site_admin"]
        },
        {"type": "null"}
      ]
    },
    "committer": {
      "description": "GitHub user account of the committer",
      "x-sql-example": "SELECT committer FROM sample_schema.sample_table",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "login": {"type": "string", "description": "GitHub username"},
            "id": {"type": "integer", "format": "int64", "description": "GitHub user ID"},
            "avatar_url": {"type": "string", "format": "uri", "description": "URL of user's avatar image"},
            "html_url": {"type": "string", "format": "uri", "description": "GitHub profile URL"},
            "type": {"type": "string", "description": "Type of user account (User/Organization)"},
            "site_admin": {"type": "boolean", "description": "Administrator status in GitHub"}
          },
          "required": ["login", "id", "avatar_url", "html_url", "type", "site_admin"]
        },
        {"type": "null"}
      ]
    },
    "parents": {
      "description": "Immediate ancestor commits in the commit history",
      "x-sql-example": "SELECT parents FROM sample_schema.sample_table",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "sha": {"type": "string", "description": "Parent commit SHA"},
          "url": {"type": "string", "format": "uri", "description": "API URL for parent commit"},
          "html_url": {"type": "string", "format": "uri", "description": "Web URL for parent commit"}
        },
        "required": ["sha", "url"]
      }
    }
  },
  "required": [
    "url",
    "sha",
    "node_id",
    "html_url",
    "comments_url",
    "commit",
    "author",
    "committer",
    "parents"
  ]
}
